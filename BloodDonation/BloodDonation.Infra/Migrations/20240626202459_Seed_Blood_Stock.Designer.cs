// <auto-generated />
using System;
using BloodDonation.Infra.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodDonation.Infra.Migrations
{
    [DbContext(typeof(BloodDonationDbContext))]
    [Migration("20240626202459_Seed_Blood_Stock")]
    partial class Seed_Blood_Stock
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BloodDonation.Core.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.BloodStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MLQuantity")
                        .HasColumnType("int");

                    b.Property<string>("RhFactor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BloodStocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa0ad1d-855f-41ad-9cd4-8dfd381f7a67"),
                            BloodType = "A",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(314),
                            MLQuantity = 0,
                            RhFactor = "Positive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("177104ab-ed2f-4aee-b545-e77d6598e4e2"),
                            BloodType = "A",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(329),
                            MLQuantity = 0,
                            RhFactor = "Negative",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2820efbd-5f72-4b10-aa11-a2b0dd4c4a0e"),
                            BloodType = "B",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(331),
                            MLQuantity = 0,
                            RhFactor = "Positive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("60978428-f6ee-4960-84cd-41795591541e"),
                            BloodType = "B",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(333),
                            MLQuantity = 0,
                            RhFactor = "Negative",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("52380942-1b40-4cfb-931d-7496af1fe234"),
                            BloodType = "AB",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(335),
                            MLQuantity = 0,
                            RhFactor = "Positive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f93c7e3d-cbe7-41c8-99a1-d704185bd1ee"),
                            BloodType = "AB",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(357),
                            MLQuantity = 0,
                            RhFactor = "Negative",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1badbd30-4f51-4d40-baf3-d245b44b9b86"),
                            BloodType = "O",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(379),
                            MLQuantity = 0,
                            RhFactor = "Positive",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d53c7b67-d8fb-4f57-9ff7-318e70d3666f"),
                            BloodType = "O",
                            CreatedAt = new DateTime(2024, 6, 26, 17, 24, 58, 880, DateTimeKind.Local).AddTicks(383),
                            MLQuantity = 0,
                            RhFactor = "Negative",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DonorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MLQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.Donor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RhFact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.Donation", b =>
                {
                    b.HasOne("BloodDonation.Core.Entities.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.Donor", b =>
                {
                    b.HasOne("BloodDonation.Core.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BloodDonation.Core.Entities.Donor", b =>
                {
                    b.Navigation("Donations");
                });
#pragma warning restore 612, 618
        }
    }
}
